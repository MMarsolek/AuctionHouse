consumes:
- application/json
definitions:
  PermissionLevel:
    description: Defines the level of permissions a user has. Certain routes can only
      be used by specific permissions.
    title: PermissionLevel
    type: string
    x-go-package: github.com/MMarsolek/AuctionHouse/model
  SocketCommand:
    description: Defines the different types of commands available using the websocket
      API.
    title: SocketCommand
    type: string
    x-go-package: github.com/MMarsolek/AuctionHouse/server/controller/ws
  commandMessage:
    description: Defines the envelope for commands sent via websocket.
    properties:
      command:
        $ref: '#/definitions/SocketCommand'
      payload:
        description: The payload for the command.
        type: object
        x-go-name: Payload
    required:
    - command
    title: WSCommandMessage
    type: object
    x-go-name: commandMessageDoc
    x-go-package: github.com/MMarsolek/AuctionHouse/server/controller/ws
  commandPlaceBid:
    description: Defines how to specify the item being bid on. This should be placed
      inside of WSCommandMessage's payload field.
    properties:
      bidAmount:
        description: Specifies the amount to bid.
        format: int64
        type: integer
        x-go-name: BidAmount
      itemName:
        description: Specifies the item to place a bid on.
        type: string
        x-go-name: ItemName
    required:
    - itemName
    - bidAmount
    title: WSCommandMessagePlaceBidRequest
    type: object
    x-go-name: commandMessagePlaceBidDoc
    x-go-package: github.com/MMarsolek/AuctionHouse/server/controller/ws
  responseMessage:
    description: Defines how results are returned to the client.
    properties:
      command:
        $ref: '#/definitions/SocketCommand'
      data:
        description: Any additional data
        type: object
        x-go-name: Data
      message:
        description: The human readable result of the command.
        type: string
        x-go-name: Message
      statusCode:
        description: The status code result of the command.
        format: int64
        type: integer
        x-go-name: StatusCode
    required:
    - statusCode
    - command
    title: WSResponseMessage
    type: object
    x-go-name: responseMessageDoc
    x-go-package: github.com/MMarsolek/AuctionHouse/server/controller/ws
  responseMessagePlaceBidData:
    description: Defines the additional data returned on a PlaceBid command.
    properties:
      amount:
        description: The amount the new bid is going for.
        format: int64
        type: integer
        x-go-name: NewBid
      itemName:
        description: The name of the item that was just bid on.
        type: string
        x-go-name: ItemName
      username:
        description: The username of the user that just placed the bid.
        type: string
        x-go-name: Username
    required:
    - itemName
    - username
    - amount
    title: WSResponseMessagePlaceBidData
    type: object
    x-go-name: responseMessagePlaceBidDataDoc
    x-go-package: github.com/MMarsolek/AuctionHouse/server/controller/ws
host: localhost
info:
  description: |-
    The purpose of this application is to provide the client with functionality to define users, items for auctions,
    and ways to place bids on those items.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: There are no terms of service at the moment. Use at your own risk,
    we take no responsibility.
  title: AuctionHouse API.
  version: 0.1.0
paths:
  /api/v1/auctions/bids:
    get:
      description: This will retrieve the highest bid for all items.
      operationId: getHighestBidsRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getHighestBidResponse'
      schemes:
      - http
      security:
      - api_key: []
      summary: Retrieves the highest bid for all items.
      tags:
      - Auctions
  /api/v1/auctions/bids/{itemName}:
    get:
      description: This will retrieve the highest bid for the specified item.
      operationId: getHighestBidRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      - in: path
        name: itemName
        required: true
        type: string
        x-go-name: ItemName
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getHighestBidResponse'
        "404":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      security:
      - api_key: []
      summary: Retrieves the highest bid for the specified item.
      tags:
      - Auctions
    post:
      consumes:
      - application/json
      description: |-
        This will place a bid on the specified item. The user is identified by the authentication token. This is only
        available for Bidder users.
      operationId: postBidRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      - in: path
        name: itemName
        required: true
        type: string
        x-go-name: ItemName
      - in: body
        name: Body
        schema:
          properties:
            bidAmount:
              description: The amount to bid on the item for.
              format: int64
              type: integer
              x-go-name: BidAmount
          required:
          - bidAmount
          type: object
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/noBody'
        "400":
          $ref: '#/responses/errorMessage'
        "404":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      security:
      - api_key: []
      summary: Makes a new bid on an item.
      tags:
      - Auctions
  /api/v1/auctions/items:
    get:
      description: This will retrieve all items from storage.
      operationId: getItemsRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getItemsResponse'
      schemes:
      - http
      security:
      - api_key: []
      summary: Gets all items that are currently stored in the system.
      tags:
      - Auctions
    post:
      consumes:
      - application/json
      description: This will create a new item available for being auctioned. This
        route is only available to Admin users.
      operationId: postItemRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      - in: body
        name: Body
        schema:
          properties:
            description:
              description: Description of the item.
              type: string
              x-go-name: Description
            image:
              description: Reference to the image source.
              type: string
              x-go-name: ImageRef
            name:
              description: Name used to identify the item later.
              type: string
              x-go-name: Name
          required:
          - name
          type: object
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/noBody'
        "400":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      security:
      - api_key: []
      summary: Creates a new item for auction.
      tags:
      - Auctions
  /api/v1/auctions/items/{itemName}:
    delete:
      description: This will delete an existing item. This route is only available
        to Admin users.
      operationId: deleteItemRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      - in: path
        name: itemName
        required: true
        type: string
        x-go-name: ItemName
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/noBody'
        "404":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      security:
      - api_key: []
      summary: Deletes an item from the server.
      tags:
      - Auctions
    get:
      description: This will retrieve a item from storage based on the name.
      operationId: getItemRequest
      parameters:
      - description: Name of the item.
        in: path
        name: itemName
        required: true
        type: string
        x-go-name: Name
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getItemResponse'
        "404":
          $ref: '#/responses/noBody'
      schemes:
      - http
      security:
      - api_key: []
      summary: Gets the item specified by the name.
      tags:
      - Auctions
    put:
      consumes:
      - application/json
      description: This will update an existing item available for being auctioned.
        This route is only available to Admin users.
      operationId: putItemRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      - in: path
        name: itemName
        required: true
        type: string
        x-go-name: ItemName
      - in: body
        name: Body
        schema:
          properties:
            description:
              description: Description of the item.
              type: string
              x-go-name: Description
            image:
              description: Reference to the image source.
              type: string
              x-go-name: ImageRef
            name:
              description: Name used to identify the item later.
              type: string
              x-go-name: Name
          required:
          - name
          type: object
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/noBody'
        "400":
          $ref: '#/responses/errorMessage'
        "404":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      security:
      - api_key: []
      summary: Updates fields for an item.
      tags:
      - Auctions
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: This will create a new user and add them to storage. The password
        is hashed before being stored and the text is never logged.
      operationId: postUserRequest
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/noBody'
        "400":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      summary: Creates a new user that will be specified by the username.
      tags:
      - Users
  /api/v1/users/{username}:
    get:
      description: This will retrieve a user from storage based on the username.
      operationId: getUserRequest
      parameters:
      - description: Username of the user.
        in: path
        name: username
        required: true
        type: string
        x-go-name: Username
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getUserResponse'
        "404":
          $ref: '#/responses/noBody'
      schemes:
      - http
      security:
      - api_key: []
      summary: Gets the user specified by the username.
      tags:
      - Users
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: This will generate a new authentication token for the user specified
        by the username and password.
      operationId: postLoginRequest
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/postLoginResponse'
        "400":
          $ref: '#/responses/errorMessage'
        "404":
          $ref: '#/responses/errorMessage'
      schemes:
      - http
      summary: Retrieves an authentication token for the user.
      tags:
      - Users
  /api/v1/ws:
    get:
      description: |-
        This will upgrade the connection to a websocket. Currently the only command available is to place a bid on an item
        using the command model. See the model defined as WSCommandMessage using WSCommandMessagePlaceBidRequest as the
        payload for how to place a bid using the websocket client.

        All messages are sent back via websocket as the model WSResponseMessage. The Data field inside of the model varies
        based on command. For example, a PlaceBid command defines the Data field as a WSResponseMessagePlaceBidData model.
      operationId: wsRequest
      parameters:
      - description: Expected to be "Bearer <auth_token>"
        in: header
        name: Authentication
        type: string
      produces:
      - application/json
      responses:
        "101":
          $ref: '#/responses/wsConnection'
      schemes:
      - ws
      security:
      - api_key: []
      summary: Establishes a connection via websockets.
      tags:
      - WebSockets
produces:
- application/json
responses:
  errorMessage:
    description: Response when there is an error with the request.
    schema:
      properties:
        message:
          description: The human readable message to the client.
          type: string
          x-go-name: Message
      type: object
  getHighestBidResponse:
    description: Contains data about the bid, what the item is, and who made it.
    schema:
      properties:
        bidAmount:
          description: The amount of money being bid for this item.
          format: int64
          type: integer
          x-go-name: BidAmount
        bidder:
          description: The user who bid on the item.
          properties:
            displayName:
              description: The display name of the user.
              type: string
              x-go-name: DisplayName
            username:
              description: The username of the user.
              type: string
              x-go-name: Username
          required:
          - username
          type: object
          x-go-name: Bidder
        item:
          description: The item being bid on.
          properties:
            description:
              description: The description of the item.
              type: string
              x-go-name: Description
            image:
              description: The reference to the image source.
              type: string
              x-go-name: ImageRef
            name:
              description: The name of the item.
              type: string
              x-go-name: Name
          required:
          - name
          type: object
          x-go-name: Item
      required:
      - bidAmount
      - item
      - bidder
      type: object
  getHighestBidsResponse:
    description: Contains data about the bid, what the item is, and who made it.
    schema:
      items:
        properties:
          bidAmount:
            description: The amount of money being bid for this item.
            format: int64
            type: integer
            x-go-name: BidAmount
          bidder:
            description: The user who bid on the item.
            properties:
              displayName:
                description: The display name of the user.
                type: string
                x-go-name: DisplayName
              username:
                description: The username of the user.
                type: string
                x-go-name: Username
            required:
            - username
            type: object
            x-go-name: Bidder
          item:
            description: The item being bid on.
            properties:
              description:
                description: The description of the item.
                type: string
                x-go-name: Description
              image:
                description: The reference to the image source.
                type: string
                x-go-name: ImageRef
              name:
                description: The name of the item.
                type: string
                x-go-name: Name
            required:
            - name
            type: object
            x-go-name: Item
        required:
        - bidAmount
        - item
        - bidder
        type: object
      type: array
  getItemResponse:
    description: Contains data about the item and how to identify them.
    schema:
      properties:
        description:
          description: The description of the item.
          type: string
          x-go-name: Description
        image:
          description: The reference to the image source.
          type: string
          x-go-name: ImageRef
        name:
          description: The name of the item.
          type: string
          x-go-name: Name
      required:
      - name
      type: object
  getItemsResponse:
    description: Contains data about the item and how to identify them.
    schema:
      items:
        properties:
          description:
            description: The description of the item.
            type: string
            x-go-name: Description
          image:
            description: The reference to the image source.
            type: string
            x-go-name: ImageRef
          name:
            description: The name of the item.
            type: string
            x-go-name: Name
        required:
        - name
        type: object
      type: array
  getUserResponse:
    description: Contains data about the user and how to identify them.
    schema:
      properties:
        displayName:
          description: The human readable display name of the user.
          type: string
          x-go-name: DisplayName
        permission:
          $ref: '#/definitions/PermissionLevel'
        username:
          description: The username for the user.
          type: string
          x-go-name: Username
      required:
      - username
      - permission
      type: object
  noBody:
    description: Response contains no body.
  postLoginRequest:
    description: Contains data about the user and how to login.
    schema:
      properties:
        password:
          description: The clear text password for the user. This is not stored as
            cleartext on the server.
          type: string
          x-go-name: Password
        username:
          description: The username for the user.
          type: string
          x-go-name: Username
      required:
      - username
      - password
      type: object
  postLoginResponse:
    description: Contains all of the information to identify the user including the
      authentication token.
    schema:
      properties:
        authToken:
          description: The token used to identify the user.
          type: string
          x-go-name: AuthToken
        displayName:
          description: The display name of the user.
          type: string
          x-go-name: DisplayName
        permission:
          $ref: '#/definitions/PermissionLevel'
        username:
          description: The username for the user.
          type: string
          x-go-name: Username
      required:
      - username
      - permission
      - authToken
      type: object
  postUserRequest:
    description: Contains data about the user and how to identify them.
    schema:
      properties:
        displayName:
          description: The human readable display name of the user.
          type: string
          x-go-name: DisplayName
        password:
          description: The clear text password for the user. This is not stored as
            cleartext on the server.
          type: string
          x-go-name: Password
        username:
          description: The username for the user.
          type: string
          x-go-name: Username
      required:
      - username
      - password
      type: object
  wsConnection:
    description: Response contains no body.
schemes:
- http
securityDefinitions:
  api_key:
    in: header
    name: KEY
    type: apiKey
swagger: "2.0"
