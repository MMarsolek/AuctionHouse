// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/MMarsolek/AuctionHouse/model"
	mock "github.com/stretchr/testify/mock"
)

// AuctionBidClient is an autogenerated mock type for the AuctionBidClient type
type AuctionBidClient struct {
	mock.Mock
}

// GetAllHighestBids provides a mock function with given fields: ctx
func (_m *AuctionBidClient) GetAllHighestBids(ctx context.Context) ([]*model.AuctionBid, error) {
	ret := _m.Called(ctx)

	var r0 []*model.AuctionBid
	if rf, ok := ret.Get(0).(func(context.Context) []*model.AuctionBid); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AuctionBid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHighestBid provides a mock function with given fields: ctx, item
func (_m *AuctionBidClient) GetHighestBid(ctx context.Context, item *model.AuctionItem) (*model.AuctionBid, error) {
	ret := _m.Called(ctx, item)

	var r0 *model.AuctionBid
	if rf, ok := ret.Get(0).(func(context.Context, *model.AuctionItem) *model.AuctionBid); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuctionBid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AuctionItem) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceBid provides a mock function with given fields: ctx, user, item, amount
func (_m *AuctionBidClient) PlaceBid(ctx context.Context, user *model.User, item *model.AuctionItem, amount int) (*model.AuctionBid, error) {
	ret := _m.Called(ctx, user, item, amount)

	var r0 *model.AuctionBid
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *model.AuctionItem, int) *model.AuctionBid); ok {
		r0 = rf(ctx, user, item, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuctionBid)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User, *model.AuctionItem, int) error); ok {
		r1 = rf(ctx, user, item, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
