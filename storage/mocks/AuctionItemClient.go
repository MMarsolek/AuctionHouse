// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/MMarsolek/AuctionHouse/model"
	mock "github.com/stretchr/testify/mock"
)

// AuctionItemClient is an autogenerated mock type for the AuctionItemClient type
type AuctionItemClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, item
func (_m *AuctionItemClient) Create(ctx context.Context, item *model.AuctionItem) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AuctionItem) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, name
func (_m *AuctionItemClient) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name
func (_m *AuctionItemClient) Get(ctx context.Context, name string) (*model.AuctionItem, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.AuctionItem
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AuctionItem); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuctionItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *AuctionItemClient) GetAll(ctx context.Context) ([]*model.AuctionItem, error) {
	ret := _m.Called(ctx)

	var r0 []*model.AuctionItem
	if rf, ok := ret.Get(0).(func(context.Context) []*model.AuctionItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AuctionItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, item
func (_m *AuctionItemClient) Update(ctx context.Context, item *model.AuctionItem) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AuctionItem) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
